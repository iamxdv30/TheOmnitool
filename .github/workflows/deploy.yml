name: CI/CD Workflow

on:
  push:
    branches:
      - development

jobs:
  # Step 1: Test Code Before Deploying to Staging
  test:
    runs-on: ubuntu-latest
    steps:
      # Checkout code from the development branch with full history
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history to avoid shallow clone issues

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.0'
          cache: 'pip'

      # Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # Create test environment file
      - name: Create test environment file
        run: |
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "MAIL_DEFAULT_SENDER=${{ secrets.MAIL_DEFAULT_SENDER }}" >> .env
          echo "TOKEN_SECRET_KEY=${{ secrets.TOKEN_SECRET_KEY }}" >> .env
          echo "SECURITY_PASSWORD_SALT=${{ secrets.SECURITY_PASSWORD_SALT }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DATABASE_URL=sqlite:///:memory:" >> .env
          echo "FLASK_ENV=testing" >> .env
          echo "IS_LOCAL=true" >> .env
      
      # Run tests
      - name: Run Tests
        run: |
          pytest --cov=./ --cov-report=xml

      # Upload coverage report
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  # Step 2: Push changes to Staging and Deploy to Heroku
  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: test # Only run this job if the test job succeeds
    environment: staging

    steps:
      # Checkout code from the development branch with full history
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history to avoid shallow clone issues

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.0'
          cache: 'pip'

      # Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Unshallow the repository if it's shallow
      - name: Unshallow the repository if needed
        run: |
          if [ -f .git/shallow ]; then
            git fetch --prune --unshallow
          else
            echo "Repository is already a full clone."
          fi

      # Configure Git for GitHub Actions
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # Authenticate with GitHub using the GITHUB_TOKEN
      - name: Authenticate with GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}

      # Push changes to staging branch
      - name: Push to Staging Branch
        run: |
          git checkout -b staging
          git push origin staging --force

      - name: Deploy to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          heroku git:remote -a omnitool-by-xdv-staging
          git push heroku staging:main --force

      - name: Run Database Migrations
        env:
          FLASK_ENV: staging
          FLASK_APP: main:create_app
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MAIL_DEFAULT_SENDER: ${{ secrets.MAIL_DEFAULT_SENDER }}
          TOKEN_SECRET_KEY: ${{ secrets.TOKEN_SECRET_KEY }}
          SECURITY_PASSWORD_SALT: ${{ secrets.SECURITY_PASSWORD_SALT }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          flask db upgrade

      - name: Verify Deployment
        run: |
          curl --fail https://omnitool-by-xdv-staging.herokuapp.com/ || exit 1