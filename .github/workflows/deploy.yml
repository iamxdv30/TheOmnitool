name: Production Deployment Workflow

on:
  push:
    branches:
      - main

jobs:
  # Step 1: Test Code Before Deploying to Production
  test:
    runs-on: ubuntu-latest
    steps:
      # Checkout code from the main branch
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Fetch all history to avoid shallow clone issues

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12.0'

      # Install dependencies
      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      # Run tests
      - name: Run Tests
        run: |
          pytest # Use your test framework

  # Step 2: Deploy to Production
  deploy-to-production:
    runs-on: ubuntu-latest
    needs: test # Only run this job if the test job succeeds

    steps:
      # Checkout code from the main branch
      - name: Checkout Code
        uses: actions/checkout@v2

      # Set up FLASK_APP environment variable
      - name: Set FLASK_APP environment variable
        run: echo "FLASK_APP=main:create_app" >> $GITHUB_ENV

      # Install Python dependencies (again, to ensure the environment is ready for Flask commands)
      - name: Install Dependencies for Deployment
        run: |
          pip install -r requirements.txt

      # Set up Heroku CLI
      - name: Set up Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      # Deploy to Heroku Production App
      - name: Deploy to Heroku Production
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          git remote add heroku https://heroku:${{ secrets.HEROKU_API_KEY }}@git.heroku.com/omnitool-by-xdv.git
          git push heroku main --force

      # Run Database Migrations for Production
      - name: Run Database Migrations
        env:
          FLASK_ENV: production
          FLASK_APP: main:create_app
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          flask db upgrade
