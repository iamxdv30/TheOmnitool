name: CI/CD Workflow

on:
  push:
    branches:
      - development

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      MAIL_USERNAME: 'info.omnitools@gmail.com'
      MAIL_DEFAULT_SENDER: 'info@theomnitools.com'
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      TOKEN_SECRET_KEY: ${{ secrets.TOKEN_SECRET_KEY }}
      SECURITY_PASSWORD_SALT: ${{ secrets.SECURITY_PASSWORD_SALT }}
      DATABASE_URL: 'sqlite:///:memory:'
      FLASK_APP: 'main.py'
      FLASK_ENV: 'testing'
      IS_LOCAL: 'true'
      SESSION_TYPE: 'filesystem'
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.0'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-flask-sqlalchemy pytest-env

      - name: Create Test Config
        run: |
          echo "TESTING=True" > .env.test
          echo "TOKEN_SECRET_KEY=${{ secrets.TOKEN_SECRET_KEY }}" >> .env.test
          echo "SESSION_TYPE=filesystem" >> .env.test
          mkdir -p instance

      - name: Run Tests
        env:
          FLASK_ENV: testing
          TESTING: "True"
          TOKEN_SECRET_KEY: ${{ secrets.TOKEN_SECRET_KEY }}
          SESSION_TYPE: "filesystem"
        run: |
          pytest --cov=./ --cov-report=html

      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: htmlcov/
          retention-days: 14

  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: test
    environment: staging

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.0'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Authenticate with GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}

      - name: Push to Staging Branch
        run: |
          git checkout -b staging
          git push origin staging --force

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      - name: Deploy to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          heroku git:remote -a omnitool-by-xdv-staging
          git push heroku staging:main --force

      - name: Update Heroku Config
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          heroku config:set FLASK_APP=main.py -a omnitool-by-xdv-staging
          heroku config:set FLASK_ENV=staging -a omnitool-by-xdv-staging
          heroku config:set IS_LOCAL=false -a omnitool-by-xdv-staging
          heroku config:set MAIL_USERNAME=info.omnitools@gmail.com -a omnitool-by-xdv-staging
          heroku config:set MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }} -a omnitool-by-xdv-staging
          heroku config:set TOKEN_SECRET_KEY=${{ secrets.TOKEN_SECRET_KEY }} -a omnitool-by-xdv-staging
          heroku config:set SECURITY_PASSWORD_SALT=${{ secrets.SECURITY_PASSWORD_SALT }} -a omnitool-by-xdv-staging
          heroku config:set SESSION_TYPE=filesystem -a omnitool-by-xdv-staging

      - name: Run Database Migrations
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          heroku run flask db upgrade -a omnitool-by-xdv-staging

      - name: Wait for application startup
        run: |
          sleep 15

      - name: Verify Deployment
        run: |
          for i in {1..3}; do
            if curl --fail https://omnitool-by-xdv-staging.herokuapp.com/; then
              echo "Deployment verified successfully"
              exit 0
            fi
            echo "Attempt $i failed, waiting before retry..."
            sleep 10
          done
          echo "Failed to verify deployment after 3 attempts"
          heroku logs --tail -a omnitool-by-xdv-staging
          exit 1