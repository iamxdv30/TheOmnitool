name: CI/CD Workflow

on:
  push:
    branches:
      - development

jobs:
  # Step 1: Test Code Before Deploying to Staging
  test:
    runs-on: ubuntu-latest
    steps:
      # Checkout code from the development branch with full history
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Fetch all history to avoid shallow clone issues

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12.0'

      # Install dependencies
      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      # Run tests
      - name: Run Tests
        run: |
          pytest # Use your test framework

  # Step 2: Push changes to Staging and Deploy to Heroku
  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: test # Only run this job if the test job succeeds

    steps:
      # Checkout code from the development branch with full history
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Fetch all history to avoid shallow clone issues

      # Unshallow the repository if it's shallow
      - name: Unshallow the repository if needed
        run: |
          if [ -f .git/shallow ]; then
            git fetch --prune --unshallow
          else
            echo "Repository is already a full clone."
          fi

      # Configure Git for GitHub Actions
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # Authenticate with GitHub using the GITHUB_TOKEN
      - name: Authenticate with GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}

      # Push changes to staging branch
      - name: Push to Staging Branch
        run: |
          git checkout -b staging
          git push origin staging --force

      # Set up Heroku CLI for deployment
      - name: Set up Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      # Deploy to Heroku Staging App
      - name: Deploy to Heroku Staging
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          git remote add heroku https://heroku:${{ secrets.HEROKU_API_KEY }}@git.heroku.com/omnitool-by-xdv-staging.git
          git push heroku staging:main --force

      # Run Database Migrations
      #- name: Run Database Migrations
      #  env:
      #    FLASK_ENV: staging
      #    FLASK_APP: main:create_app # Assuming your app factory function is named 'create_app' in main.py
      #    DATABASE_URL: ${{ secrets.DATABASE_URL }}
      #  run: |
      #    pip install -r requirements.txt
      #    flask db upgrade
