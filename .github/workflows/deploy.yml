name: CI/CD Workflow

on:
  push:
    branches:
      - development

jobs:
  # Step 1: Test Code Before Deploying to Staging
  test:
    runs-on: ubuntu-latest
    env:
      MAIL_USERNAME: 'info.omnitools@gmail.com'
      MAIL_DEFAULT_SENDER: 'info@theomnitools.com'
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      TOKEN_SECRET_KEY: ${{ secrets.TOKEN_SECRET_KEY }}
      SECURITY_PASSWORD_SALT: ${{ secrets.SECURITY_PASSWORD_SALT }}
      DATABASE_URL: 'sqlite:///:memory:'
      FLASK_ENV: 'testing'
      IS_LOCAL: 'true'
      
    steps:
      # Checkout code from the development branch with full history
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history to avoid shallow clone issues

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.0'
          cache: 'pip'

      # Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run tests with coverage
      - name: Run Tests
        run: |
          pytest --cov=./ --cov-report=html

      # Archive the coverage report
      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: htmlcov/
          retention-days: 14

  # Step 2: Push changes to Staging and Deploy to Heroku
  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: test # Only run this job if the test job succeeds
    environment: staging

    steps:
      # Checkout code from the development branch with full history
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history to avoid shallow clone issues

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.0'
          cache: 'pip'

      # Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Configure Git for GitHub Actions
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # Authenticate with GitHub using the GITHUB_TOKEN
      - name: Authenticate with GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}

      # Push changes to staging branch
      - name: Push to Staging Branch
        run: |
          git checkout -b staging
          git push origin staging --force

      # Set up and deploy to Heroku
      - name: Deploy to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_EMAIL: ${{ secrets.HEROKU_EMAIL }}
        run: |
          git remote remove heroku || true
          git remote add heroku https://heroku:${{ secrets.HEROKU_API_KEY }}@git.heroku.com/omnitool-by-xdv-staging.git
          git push heroku staging:main --force

      # Run Database Migrations
      - name: Run Database Migrations
        env:
          FLASK_ENV: 'staging'
          FLASK_APP: 'main:create_app'
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          MAIL_USERNAME: 'info.omnitools@gmail.com'
          MAIL_DEFAULT_SENDER: 'info@theomnitools.com'
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          TOKEN_SECRET_KEY: ${{ secrets.TOKEN_SECRET_KEY }}
          SECURITY_PASSWORD_SALT: ${{ secrets.SECURITY_PASSWORD_SALT }}
        run: |
          flask db upgrade

      # Verify the deployment
      - name: Verify Deployment
        run: |
          curl --fail https://omnitool-by-xdv-staging.herokuapp.com/ || exit 1